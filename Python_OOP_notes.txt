Quick review - object oriented programming in PythonBased on http://www.python-course.eu/object_oriented_programming.phpConceptsClassesObjectsInstantiationClass variablesInstance variablesStateMethodsAbstractionEncapsulationGettersSettersInheritanceMultiple inheritanceConstructorsdef __init__(self)DestructorsOOP is a different paradigm of programming. You can write perfectly good code without object orientation, but it is a common approach and many feel it is quite a powerful framework. Instead of writing functions and a step by step listing of commands, in OOP we code up a collection of interacting objects. The objects can be of different classes (e.g. we can make cake objects out of the Cake class, and bird objects out of the Bird class). The different objects can interact with each other by passing information back and forth. Cake analogy - a recipe to bake a cake is like a class definition, it gives instructions for how to make an object of the Cake class. We make an instance or object of the cake class (instantiation) by following the cake class definition. A cake recipes needs ingredients and instructions. Similarly, a class needs variables and methods. Classes essentially describe the abstract characteristics of some thing. Classes have two types of variables: class variables are shared by all objects of some class. Instance variables have values will differ for different objects. The totality of the values of the attributes of a given object is called its state. An object is basically its state and its methods.A method is a function that belongs to a class. Methods are defined within classes, and only objects of a given class can call (or use) the methods.Abstraction is achieved through encapsulation (data hiding).Encapsulation means we restrict the access of some the components of an object – the internal representation of an object can’t be seen from outside the object’s definition. Access to the data is permitted through special methods we write: Getters (that get values) and Setters (that set attributes of an object to new values). Why not just update an object’s values directly? Well, this way allows us to write checks on what we’re setting variables to and functions a sort of safety net to make sure we’re not accidentally creating invalid states. Classes can inherit attributes and methods from other classes. For example, if we wanted to write a program that would have different types of dogs, we could write a generic Dog class that had variables like weight, colour, and hair_length. We could also define methods like fetch, wag_tail, and bark. We can create (instantiate) dog objects by calling the Dog class.   Next, we could create a Poodle and Labrador classes. We can set these classes to inherit from the Dog class – they will automatically have the same variables  (weight, colour, and hair_length) and methods (fetch, wag_tail, and bark) available. Of course, we can define new variables and methods, for example we might define the fluffiness and tantrum_susceptibility variables for the Poodle class. Python doesn’t have real constructors, which initialize the instance variables of a new object, but the __init__() method has a similar function. There is also the __del__() method which functions as a destructor, destroying instances.